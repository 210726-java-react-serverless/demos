package com.revature.add_books;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder;
import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.LambdaLogger;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyRequestEvent;
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyResponseEvent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import lombok.Data;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class AddBooksHandler implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {

    private static final Gson mapper = new GsonBuilder().setPrettyPrinting().create();
    private final DynamoDBMapper ddb = new DynamoDBMapper(AmazonDynamoDBClientBuilder.defaultClient());

    @Override
    public APIGatewayProxyResponseEvent handleRequest(APIGatewayProxyRequestEvent requestEvent, Context context) {

        LambdaLogger logger = context.getLogger();
        APIGatewayProxyResponseEvent responseEvent = new APIGatewayProxyResponseEvent();
        try {
            Book[] books = mapper.fromJson(requestEvent.getBody(), Book[].class);
            List<String> newIds = addBooks(logger, books);
            responseEvent.setBody(mapper.toJson(newIds));
            responseEvent.setStatusCode(201);
        } catch (Exception e) {
            logger.log("ERROR: " + e);
            responseEvent.setStatusCode(500);
        }

        return responseEvent;

    }

    public List<String> addBooks(LambdaLogger logger, Book... books) {
        logger.log("Attempting to persist objects: " + Arrays.toString(books));
        ddb.batchSave((Object) books);
        logger.log("Objects successfully persisted: " + Arrays.toString(books));
        return Arrays.stream(books).map(Book::getId).collect(Collectors.toList());
    }

    @Data
    @DynamoDBTable(tableName = "books")
    public static class Book {

        @DynamoDBHashKey
        @DynamoDBAutoGeneratedKey
        private String id;

        @DynamoDBAttribute
        private String isbn;

        @DynamoDBAttribute
        private String title;

        @DynamoDBAttribute
        private String publisher;

        @DynamoDBAttribute
        private List<String> authors;

        @DynamoDBAttribute
        private List<String> genres;

        @DynamoDBAttribute
        private String coverImageUrl;

    }

}
